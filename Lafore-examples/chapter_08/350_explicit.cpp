// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// explicit.cpp
// демонстрация использования ключевого слова explicit на примере ранее рассмотренной
// программы englconv.cpp (перевод длины из объекта класса Distance в метры (значение
// типа float) и обратно)

#include <locale>
#include <iostream>
using namespace std;

class Distance // длина в английской системе
{
private:
	const float MTF; // коэффициент перевода метров в футы
	                 // (1 метр = MTF футов)
	int feet;        // футы
	float inches;    // дюймы
public:
	// конструктор без аргументов
	Distance() : feet(0), inches(0.0), MTF(3.280833F)
		{ }
	// конструктор с одним аргументом, переводящий метры в футы и дюймы
	// (с предваряющим его ключевым словом explicit, которое разрешает
	// только явное использование конструктора, запрещая неявные его использования
	// при различных преобразованиях)
	explicit Distance(float meters) : MTF(3.280833F)
	{
		float fltfeet = MTF * meters;   // переводим в футы
		feet = int(fltfeet);            // берем число полных футов
		inches = 12 * (fltfeet - feet); // остаток — это дюймы
	}
	void showdist() const // вывод полей на экран
		{ wcout << feet << L"\'-" << inches << L'\"'; }
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	void fancyDist(Distance); // прототип (объявление) функции
	
	// используем конструктор с одним аргументом
	// для преобразования значения в метрах (2.35F) в объект класса Distance
	// (это явное использование конструктора, только оно разрешено при
	// объявлении конструктора с ключевым словом explicit)
	Distance dist1(2.35F);

	// Distance dist1 = 2.35F; // ОШИБКА: нельзя использовать такое выражение,
	                           // если конструктор объявлен с ключевым словом explicit
	
	wcout << L"dist1 = "; dist1.showdist();

	float mtrs = 3.0F;
	wcout << L"\ndist1 ";
	// fancyDist(mtrs); // ОШИБКА: нельзя передавать в функцию значение типа float
	                    // вместо требующегося объекта класса Distance,
						// если конструктор объявлен с ключевым словом explicit.
	                    // Если убрать ключевое слово explicit из объявления конструктора,
	                    // то такой вызов функции сработает.
	
	return 0;
}

// определение объявленной выше в main() функции
void fancyDist(Distance d)
{
	wcout << L"(в футах и дюймах) = ";
	d.showdist();
	wcout << endl;
}