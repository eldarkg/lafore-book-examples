// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// strimem.cpp
// класс String с экономией памяти
// (с перегрузкой операции присваивания и копирующего конструктора)

// для использования небезопасной функции wcscpy
#define _CRT_SECURE_NO_WARNINGS

#include <locale>
#include <iostream>   // для функций ввода/вывода
// #include <cstring> // для функций wcslen и wcscpy не понадобился
using namespace std;

class strCount // класс, представляющий счетчик объектов класса String,
{              // содержащих одну и ту же строку
private:
	int count;           // счетчик объектов
	wchar_t* str;        // указатель на строку
	friend class String; // сделаем члены текущего класса strCount доступными для String	

	// методы тоже скрыты от использования (кроме дружественных классов)

	strCount(const wchar_t* s)         // конструктор с одним аргументом
	{
		int length = wcslen(s);        // длина строки-аргумента
		str = new wchar_t[length + 1]; // получим память под строку и
		wcscpy(str, s);                // скопируем в нее аргумент
		count = 1;                     // начнем счет с единицы
	}

	~strCount()                        // деструктор
		{ delete[] str; }              // освободим память, занятую строкой
};

class String // класс, представляющий строку
{
private:
	strCount* psc; // указатель на объект класса strCount
public:
	String()                   // конструктор без аргументов
		{ psc = new strCount(L""); }

	String(const wchar_t* s)   // конструктор с одним аргументом
		{ psc = new strCount(s); }

	String(String& S)          // копирующий конструктор
	{
		psc = S.psc;
		(psc->count)++;
	}
	
	~String()                  // деструктор
	{
		if (psc->count == 1)   // если текущий объект — последний пользователь объекта strCount,
			delete psc;        //     удалить этот объект strCount
		else                   // в противоположном случае —
			(psc->count)--;    //     уменьшить счетчик в объекте strCount
	}
	
	void display()             // вывести строку на экран
	{
		wcout << psc->str;                     // вывести строку
		wcout << L" (адрес = " << psc << L")"; // вывести адрес объекта strCount
	}
	
	void operator= (String& S) // операция присвоения одного объекта String другому
	{
		// в случае присвоения одного объекта String (параметр S) другому (текущему объекту)
		// у текущего объекта уже есть некое значение, которое следует удалить:
		
		if (psc->count == 1)   // если текущий объект — последний пользователь объекта strCount,
			delete psc;        //     удалить этот объект strCount
		else                   // в противоположном случае —
			(psc->count)--;    //     уменьшить счетчик в объекте strCount
		
		// на место удаленного значения записываем новое:

		psc = S.psc;           // использовать объект strCount параметра
		(psc->count)++;        // увеличить счетчик в объекте strCount параметра
	}
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));
	
	String s3 = L"Муха по полю пошла, муха денежку нашла.";
	wcout << L"s3 = "; s3.display();   // вывести на экран строку s3

	String s1;                         // определим еще одну строку s1,
	s1 = s3;                           // с помощью операции присвоения присвоим ей строку s3
	wcout << L"\ns1 = "; s1.display(); // и выведем строку s1 на экран

	String s2(s3);                     // определим еще одну строку s2, проинициализировав ее
	                                   // значением строки s3 с помощью копирующего конструктора,
	wcout << L"\ns2 = "; s2.display(); // затем выведем строку s2 на экран
	wcout << endl;

	return 0;
}