// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// where.cpp
// указатель this

#include <locale>
#include <iostream>  // для функций ввода/вывода
using namespace std;

class where
{
private:
	char charray[10]; // занимает 10 байтов
public:
	void reveal()
		{ wcout << L"Адрес моего объекта: " << this << endl; }
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));
	
	where w1, w2, w3; // создадим три объекта

	w1.reveal();      // посмотрим, где они хранятся
	w2.reveal();
	w3.reveal();

	// У меня получилось, что хоть размер каждого из объектов равен 10 байтов,
	// разница между их адресами составила 12 байтов.
	
	// Это произошло из-за того, что по умолчанию данные записываются по адресам,
	// кратным размеру машинного слова. У меня этот размер равен 4 байта (32 бита,
	// так как прилжение 32-разрядное). Значит, данные могут записываться в области
	// памяти размером 4 байта, 8 байт, 12 байт, 16 байт и так далее. Для
	// 10 байтов ближайший больший (удобный для процессора) размер равен 12 байтам.
	// Поэтому для наших объектов размером в 10 байт каждый выделилась область
	// памяти по 12 байт.

	// Эта особенность называется «выравниванием данных в памяти компьютера» и она
	// внедрена из-за того, что при таком порядке хранения данных процессор работает
	// быстрее, хоть память при этом расходуется неэкономно.

	return 0;
}