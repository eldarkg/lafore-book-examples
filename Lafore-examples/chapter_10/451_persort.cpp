// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// persort.cpp
// сортировка объектов класса person с помощью массива указателей на них

#include <locale>
#include <iostream>
#include <string> // для работы со стандартным классом wstring
using namespace std;

class person // класс, представляющий человека
{
protected:
	wstring name; // имя человека
public:
	void setName()          // получение от пользователя данных объекта
		{ wcout << L"Введите имя: "; wcin >> name; }
	void printName() const  // вывод на экран данных объекта
		{ wcout << endl << name; }
	wstring getName() const // возврат данных объекта
		{ return name; }
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));
	// переключение стандартного потока ввода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	void bsort(person**, int); // прототип функции
	person* persPtr[100];      // массив указателей на объекты класса «человек»
	int n = 0;                 // количество людей в массиве
	wchar_t choice;

	// создадим список объектов класса «человек», указатели на которые будем
	// хранить в массиве указателей persPtr
	do
	{
		persPtr[n] = new person;             // создаем новый объект
		persPtr[n]->setName();               // получаем от пользователя имя человека
		n++;                                 // засчитаем нового человека
		wcout << L"Продолжаем ввод (д/н)? "; // спрашиваем, закончен ли ввод
		wcin >> choice;
	} while (choice == L'д');

	wcout << L"\nНеотсортированный список:"; // выведем полученный от пользователя
	for (int j = 0; j < n; j++)              // список объектов класса person,
		{ persPtr[j]->printName(); }         // указатели на которые содержатся в
	wcout << endl;                           // массиве persPtr

	bsort(persPtr, n); // отсортируем указатели на объекты класса person
	                   // в массиве указателей persPtr

	wcout << L"\nОтсортированный список:";   // выведем тот же список объектов класса
	for (int j = 0; j < n; j++)              // person после сортировки
		{ persPtr[j]->printName(); }
	wcout << endl;

	return 0;
}

// функция реализует упорядочивание элементов массива по возрастанию
// (используется «сортировка методом пузырька», по-английски «bubble sort»)
// pp — указатель на массив указателей на объекты класса person;
//  n — количество указателей в массиве
void bsort(person** pp, int n)
{
	void order(person**, person**); // прототип функции
	int j, k;                       // индексы для заданного массива

	for (j = 0; j < n - 1; j++)     // внешний цикл
		for (k = j + 1; k < n; k++) // внутренний цикл
			order(pp + j, pp + k);  // упорядочим два выбранных элемента
}

// функция упорядочивает два элемента по возрастанию
// pp1 (и pp2) — указатель на элемент массива с указателем на объект класса person
void order(person** pp1, person** pp2)
{
	if ((*pp1)->getName() > (*pp2)->getName()) // если первый объект больше второго,
	{                                          // (сравниваются имена людей)
		person* tempptr = *pp1;                // то меняем указатели на них местами
		*pp1 = *pp2;                           // в массиве указателей
		*pp2 = tempptr;
	}
}