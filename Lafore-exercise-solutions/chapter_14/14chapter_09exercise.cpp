// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 14chapter_09exercise.cpp
// Имеется класс safearray из предыдущего упражнения (упражнение 8 главы 14).
// Этот класс реализует «безопасный» массив, проверяющий правильность
// задаваемых ему индексов. При ошибке он генерирует исключение. Требуется
// модифицировать класс этого исключения так, чтобы с помощью этого класса
// можно было передать в блок catch значение неправильного индекса. В функции
// main требуется продемонстрировать использование этой информации в блоке
// catch.

#include <locale>
#include <iostream>
using namespace std;

const int LIMIT = 3; // размер массива

class safearray // класс, реализующий «безопасный» массив
{
private:
	int arr[LIMIT];
public:
	class IndexOut               // класс исключения
	{
	public:
		int index;                 // ошибочный индекс
		IndexOut(int i) : index(i) // конструктор
			{ }
	};

	// обратите внимание, что функция возвращает ссылку!
	int& operator[] (int n)
	{
		if (n < 0 || n >= LIMIT) // при выходе индекса за границы диапазона
			throw IndexOut(n);   // генерируем исключение
		return arr[n];
	}
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	try
	{
		safearray sar;
		// sar[-1] = 34;                       // ошибка в индексе
		sar[0] = -98; sar[1] = 0; sar[2] = 21; // операция индекса слева от присваивания
		// sar[3] = 66;                        // ошибка в индексе
		int temp;
		temp = sar[0];                         // операция индекса справа от присваивания
		wcout << L"int: " << temp << L' ' << sar[1] << L' ' << sar[2] << endl;
	}
	catch (safearray::IndexOut err)
	{
		wcout << L"Ошибочный индекс: " << err.index << L"!\n";
		exit(1);
	}

	return 0;
}