// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 07chapter_05exercise.cpp
// программа получает обыкновенные дроби (представленные классом fraction)
// от пользователя, сохраняет их в массив, а затем вычисляет среднее значение и
// выводит результат на экран

#include <locale>
#include <iostream>
using namespace std;

class fraction // класс, представляющий обыкновенную дробь
{
private:
	int num; // числитель
	int den; // знаменатель
public:
	// конструктор без аргументов
	fraction()
		{ }
	// конструктор с двумя аргументами
	fraction(int n, int d) : num(n), den(d)
		{ lowterms(); }
	// метод для получения данных класса от пользователя с клавиатуры
	void get()
	{
		wchar_t slash; // для косой черты
		wcin >> num >> slash >> den;
		lowterms();
	}
	// константный метод выводит поля объекта класса на экран
	void display() const
		{ wcout << num << L'/' << den; }
	// метод для сложения двух обыкновенных дробей
	void add(fraction f1, fraction f2)
	{
		num = f1.num * f2.den + f2.num * f1.den;
		den = f1.den * f2.den;
		lowterms();
	}
	// метод для умножения двух обыкновенных дробей
	void mul(fraction f1, fraction f2)
	{
		num = f1.num * f2.num;
		den = f1.den * f2.den;
		lowterms();
	}
	// метод (прототип) для сокращения дроби до несократимого вида
	void lowterms();
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));
	// переключение стандартного потока ввода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	const int SIZE = 100; // размер массива
	fraction f[SIZE];     // сам массив обыкновенных дробей
	wchar_t ans;          // для ответа пользователя о продолжении ввода (д/н)
	int n = 0;            // индекс массива при вводе обыкновенных дробей
						  // (количество введенных обыкновенных дробей)
	
	// получаем от пользователя обыкновенные дроби и помещаем их в массив
	do {
		if (n == SIZE) // при переполнении массива
		{
			wcout << L"Нельзя ввести больше " << SIZE << L" обыкновенных дробей!" << endl;
			break; // выйти из цикла
		}
		wcout << L"Введите обыкновенную дробь (числитель/знаменатель) номер " << n + 1
			  << L": "; f[n++].get();
		wcout << L"Продолжить (д/н)? "; wcin >> ans;
	} while (ans != L'н');

	// суммируем введенные пользователем обыкновенные дроби
	fraction sum(0, 1); // аналог нуля для обыкновенной дроби: 0/1
	for (int j = 0; j < n; j++)
		sum.add(sum, f[j]);

	// Чтобы получить среднее значение, разделим сумму обыкновенных дробей sum
	// на их количество n. Деление на целое число n — это то же самое, что
	// умножение на обыкновенную дробь 1/n, то есть задача сводится к перемножению
	// двух обыкновенных дробей sum и 1/n
	fraction average,       // для среднего значения
		     divider(1, n); // обыкновенная дробь 1/n
	average.mul(sum, divider);

	// выводим результат на экран
	wcout << L"\nСреднее арифметическое введенных дробей: ";
	average.display(); wcout << endl;

	return 0;
}

// метод для сокращения дроби до несократимого вида
void fraction::lowterms()
{
	long tnum, tden, // две временные переменные для хранения числителя и знаменателя
		 temp,       // временная переменная для хранения значения при обмене
		 gcd;        // наибольший общий делитель, который нужно найти (greatest common divisor)

	tnum = labs(num); // возьмем значения числителя и знаменателя по модулю
	tden = labs(den); // (заголовочный файл cmath для функции labs не понадобился)

	if (tden == 0) // проверка знаменателя на 0
		{ cout << "Недопустимый знаменатель!"; exit(1); }
	else if (tnum == 0) // проверка числителя на 0
		{ num = 0; den = 1; return; }

	// нахождение наибольшего общего делителя (Алгоритм Евклида)
	while (tnum != 0)
	{
		// добьемся, чтобы числитель был больше
		if (tnum < tden)                               // если числитель меньше знаменателя,
			{ temp = tnum; tnum = tden; tden = temp; } // меняем их местами

		tnum = tnum - tden;
	}
	gcd = tden;

	num = num / gcd; // делим числитель и знаменатель на
	den = den / gcd; // полученный наибольший общий делитель
}