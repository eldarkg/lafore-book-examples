// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 07chapter_10exercise.cpp
// Написать класс matrix, реализующий "надежную" матрицу на двумерном массиве по тем же
// принципам, что и "надежный" одномерный массив, реализованный в упражнении 8 главы 7

// Задание к упражнению 8 главы 7:
// написать класс safearay, реализующий "надежный" массив, где под надежностью
// подразумевается, что при записи элемента в массив или получении значения
// определенного элемента из массива будут выполнены проверки, не нарушаются
// ли границы массива; написать программу, демонстрирующую работу этого класса

#include <locale>
#include <iostream>
using namespace std;

class matrix // класс, реализующий безопасную работу с матрицей на двумерном массиве
{
private:
	static const int NROWS = 10; // количество строк двумерного массива
	static const int NCOLS = 10; // количество столбцов двумерного массива
	int sar[NROWS][NCOLS];       // сам двумерный массив
	int mrows;                   // количество строк в матрице
	int mcols;                   // количество столбцов в матрице

	// В главе 7 книги мы изучили массивы с ФИКСИРОВАННЫМ размером. Однако,
	// в условиях задания требуется, чтобы конструктор класса позволял
	// определять размер массива, но это невозможно для массивов с фиксированным
	// размером. На самом деле, здесь ошибка перевода — в англоязычном оригинале
	// речь идет не о массиве, а о матрице. То есть конструктор класса должен
	// позволять определять не размер массива, а размер матрицы. То есть
	// у нас есть две константы, определяющие размеры двумерного массива,
	// их менять во время работы программы нельзя. И у нас есть размеры
	// матрицы, которые менять во время работы программы можно; размеры матрицы
	// могут быть меньше или равны размерам массива, но не могут превышать размеры
	// массива.

public:
	// конструктор (позволяет определить размеры матрицы)
	matrix(int mr, int mc)
	{
		// размеры матрицы не могут быть нулевыми, отрицательными или превышать
		// размеры двумерного массива
		if ((mr > 0 && mr <= NROWS) && (mc > 0 && mc <= NCOLS))
		{
			mrows = mr;
			mcols = mc;
		}
		else // при ошибке выдать сообщение и завершить работу программы
		{
			wcout << L"Один или оба заданных размера матрицы не входят в размеры массива "
				<< NROWS << L'x' << NCOLS << L"!";
			exit(1); // завершить работу программы
		}
	}
	// метод записывает заданное значение в массив по заданному двумерному индексу
	void putel(int irow, int icol, int el); // прототип
	// метод возвращает элемент, имеющий заданный двумерный индекс
	int getel(int irow, int icol); // прототип
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	matrix m1(3, 4);  // объект класса matrix (безопасная матрица на двумерном массиве)
	int temp = 12345; // тестовое число для записи в матрицу

	// две следующие строки (тест из задания к упражнению), очевидно, должны
	// привести к ошибке, так как двумерный индекс [7][4] выходит за размеры заданной
	// выше матрицы 3х4 (чтобы проверить это, можно эти строки раскомментировать)

	// m1.putel(7, 4, temp);  // помещаем значение temp в матрицу
	// temp = m1.getel(7, 4); // получаем значение из матрицы

	// две следующие строки должны сработать без ошибок

	m1.putel(2, 3, temp);  // помещаем значение temp в матрицу
	temp = m1.getel(2, 3); // получаем значение из матрицы

	return 0;
}

// метод записывает заданное значение в массив по заданному двумерному индексу
// с проверкой, не выходит ли двумерный индекс за границы матрицы
void matrix::putel(int irow, int icol, int el)
{
	if ((irow >= 0 && irow < mrows) && (icol >= 0 && icol < mcols))
		sar[irow][icol] = el;
	else
		wcout << L"Запись в матрицу не выполнена, индекс [" << irow
		      << L"][" << icol << L"] выходит за размеры [0.." << mrows - 1
		      << L"][0.." << mcols - 1 << L"]" << endl;
}

// метод возвращает элемент, имеющий заданный двумерный индекс
// с проверкой, не выходит ли двумерный индекс за границы матрицы
int matrix::getel(int irow, int icol)
{
	if ((irow >= 0 && irow < mrows) && (icol >= 0 && icol < mcols))
		return sar[irow][icol];
	else
	{
		wcout << L"Элемент из матрицы не получен, индекс [" << irow
			<< L"][" << icol << L"] выходит за размеры [0.." << mrows - 1
			<< L"][0.." << mcols - 1 << L"]" << endl;
		exit(1); // завершение работы программы с ошибкой
	}
}