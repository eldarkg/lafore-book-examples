// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 07chapter_03exercise.cpp
// программа, вычисляющая среднее значение интервалов, заданных в футах и дюймах

#include <locale>
#include <iostream>
using namespace std;

class Distance // класс, представляющий интервал в английских футах и дюймах
{
private:
	int feet;     // футы (1 фут = 12 дюймов)
	float inches; // дюймы
public:
	// конструктор без аргументов
	Distance() : feet(0), inches(0.0)
		{ }
	void getdist() // получение данных класса от пользователя
	{
		wcout << L"Введите число футов: "; wcin >> feet;
		wcout << L"Введите число дюймов: "; wcin >> inches;
	}
	void showdist() const // вывод данных класса на экран
		{ wcout << feet << L"\'-" << inches << L'\"'; }
	// метод для сложения интервалов
	void add_dist(Distance, Distance); // прототип функции
	// метод для деления интервала на целое число
	void div_dist(Distance, int); // прототип функции
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));
	// переключение стандартного потока ввода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	const int MAX = 100; // количество элементов в массиве
	Distance dist[MAX];  // массив объектов класса Distance (интервалов)
	wchar_t ch;          // для ответа на вопрос о продолжении ввода
	int i = 0;           // индекс массива при вводе данных
						 // (количество введенных пользователем интервалов)

	// получаем данные от пользователя
	do {

		if (i == MAX) // при переполнении массива
		{
			wcout << L"Нельзя ввести больше " << MAX << L" интервалов!" << endl;
			break; // выйти из цикла
		}

		wcout << L"Введите интервал номер " << i + 1 << L": " << endl;
		dist[i++].getdist(); // получить данные интервала от пользователя

		wcout << L"Продолжить ввод (д/н)? "; wcin >> ch;
	} while (ch != L'н');

	// отделим пустой строкой
	wcout << endl;

	// суммируем введенные пользователем интервалы
	Distance sum;
	for (int j = 0; j < i; j++)
		sum.add_dist(sum, dist[j]);

	// находим среднее значение интервалов делением их суммы на их количество
	sum.div_dist(sum, i);

	// выводим полученный результат на экран
	wcout << L"Среднее значение введенных интервалов: "; sum.showdist();
	wcout << endl;

	return 0;
}

// функция-член класса складывает два объекта класса Distance, то есть
// две длины в английской системе
void Distance::add_dist(Distance d1, Distance d2)
{
	inches = d1.inches + d2.inches; // сложение дюймов
	feet = 0;                       // с возможным заемом
	while (inches >= 12.0)          // пока число дюймов больше или равно 12.0,
	{                               // уменьшаем число дюймов
		inches -= 12.0;             // на 12.0 и увеличиваем
		feet++;                     // число футов на 1
	}
	feet += d1.feet + d2.feet;      // сложение футов
}

// функция-член класса получает результат от деления объекта класса Distance
// на целое число
void Distance::div_dist(Distance d, int divisor)
{
	float fltfeet = d.feet + d.inches / 12.0; // переводим интервал в футы
	fltfeet /= divisor;                       // делим полученные футы на целое число
	feet = int(fltfeet);                      // целую часть результата деления
	                                          // сохраняем в поле для футов
	inches = (fltfeet - feet) * 12.0;         // дробную часть результата деления
	                                          // переводим в дюймы и сохраняем
	                                          // в поле для дюймов
}