// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 10chapter_03exercise.cpp
// Имеется массив указателей на строки, подобный используемому в примере
// 436_ptrtostr.cpp текущей (10-й) главы. Требуется написать функции
// для сортировки строк по алфавиту. Предполагается, что для этого
// можно переделать функции bsort и order из примера 429_ptrsort.cpp
// текущей (10-й) главы. Требуется, чтобы выполнялась сортировка указателей
// на строки, а не самих строк. Кроме этого, нужно написать программу для
// тестирования сортировки строк в функции main.

#include <locale>
#include <iostream>
// #include <cstring> // для функции wcscmp не понадобился
using namespace std;

const int SIZE = 7; // количество указателей на строки в массиве
                    // (из примера 436_ptrtostr.cpp 10-й главы)

// прототип функции сортировки массива
void bsort(const wchar_t **, int);
// прототип функции сортировки двух элементов массива
void order(const wchar_t **, const wchar_t **);

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	// массив указателей на строки (из примера 436_ptrtostr.cpp 10-й главы)
	const wchar_t* arrptrs[SIZE] =
	{
		L"Понедельник", L"Вторник", L"Среда", L"Четверг",
		L"Пятница", L"Суббота", L"Воскресенье"
	};

	bsort(arrptrs, SIZE); // сортируем массив строк

	// вывод всех строк из массива на экран
	for (int j = 0; j < SIZE; j++)
		wcout << *(arrptrs + j) << endl;

	return 0;
}

// функция упорядочивает элементы массива строк в алфавитном порядке
// (используется «сортировка методом пузырька», по-английски «bubble sort»)
// (ptr — указатель на массив строк, n — количество элементов в массиве)
// (основа функции взята из примера 429_ptrsort.cpp 10-й главы, внесены изменения)
void bsort(const wchar_t **ptr, int n)
{
	for (int j = 0; j < n - 1; j++)      // внешний цикл
		for (int k = j + 1; k < n; k++)  // внутренний цикл
			order(ptr + j, ptr + k);     // упорядочим два выбранных элемента
}

// функция получает указатели на два элемента массива строк (содержимое каждого из
// этих элементов также представляет собой указатель на первый символ строки) и
// упорядочивает содержимое этих двух элементов массива строк по алфавитному порядку
// самих строк
// (основа функции взята из примера 429_ptrsort.cpp 10-й главы, внесены изменения)
void order(const wchar_t **s1, const wchar_t **s2)
{
	if (wcscmp(*s1, *s2) > 0)      // если первая строка больше второй,
	{
		const wchar_t *temp = *s1; // то меняем их местами
		*s1 = *s2;
		*s2 = temp;
	}
}