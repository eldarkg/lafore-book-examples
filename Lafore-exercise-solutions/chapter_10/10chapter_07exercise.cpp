// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 10chapter_07exercise.cpp
// Имеется класс person, представляющий человека, из программы 451_persort.cpp
// этой (10-й) главы. Требуется добавить в него новое поле salary типа float,
// представляющее зарплату человека. Также требуется модифицировать методы
// получения данных от пользователя и вывода данных на экран (с изменением их
// названий), чтобы они работали и с новым полем salary. Добавить метод
// getSalary. Написать функцию salsort для сортировки указателей в массиве
// указателей на объекты класса person согласно размеру зарплат. Реализовать
// всю сортировку в функции salsort без обращения к другим функциям.

#include <locale>
#include <iostream>
#include <string> // для работы со стандартным классом wstring
using namespace std;

class person // класс, представляющий человека
{
protected:
	wstring name; // имя человека
	float salary; // зарплата человека
public:
	void setData()          // получение от пользователя данных объекта
	{
		wcout << L" введите имя: "; wcin >> name;
		wcout << L" введите зарплату: "; wcin >> salary;
	}
	void printData() const  // вывод на экран данных объекта
	{
		wcout << endl << L" имя: " << name;
		wcout << endl << L" зарплата: " << salary;
	}
	float getSalary() const // возврат поля, содержащего зарплату человека
		{ return salary; }
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));
	// переключение стандартного потока ввода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	void salsort(person**, int); // прототип функции сортировки
	person* persPtr[100];        // массив указателей на объекты класса «человек»
	int n = 0;                   // количество людей в массиве
	wchar_t choice;              // хранит выбор пользователя ('д'/'н' — «да»/«нет»)

	// создадим список объектов класса «человек», указатели на которые будем
	// хранить в массиве указателей persPtr
	do
	{
		persPtr[n] = new person;             // создаем новый объект
		wcout << L"Субъект " << n << endl;
		persPtr[n]->setData();               // получаем от пользователя данные человека
		n++;                                 // увеличение счетчика объектов
		wcout << L"Продолжаем ввод (д/н)? "; // спрашиваем, закончен ли ввод
		wcin >> choice;
	} while (choice == L'д');

	wcout << L"\nНеотсортированный список:"; // выведем полученный от пользователя
	for (int j = 0; j < n; j++)              // список объектов класса person,
	{                                        // указатели на которые содержатся в
		wcout << endl << L"Субъект " << j;   // массиве persPtr
		(*(persPtr + j))->printData();
	}
	wcout << endl;

	salsort(persPtr, n); // отсортируем указатели на объекты класса person
	                     // в массиве указателей persPtr

	wcout << L"\nОтсортированный список:";   // выведем тот же список объектов класса
	for (int j = 0; j < n; j++)              // person после сортировки
	{
		wcout << endl << L"Субъект " << j;
		(*(persPtr + j))->printData();
	}
	wcout << endl;

	return 0;
}

// функция реализует упорядочивание элементов массива по возрастанию
// (используется «сортировка методом пузырька», по-английски «bubble sort»)
// pp — указатель на массив указателей на объекты класса person;
//  n — количество указателей в массиве
void salsort(person** pp, int n)
{
	for (int j = 0; j < n - 1; j++)     // внешний цикл
		for (int k = j + 1; k < n; k++) // внутренний цикл
            // если первый объект больше второго (сравниваются зарплаты людей),
			if ((*(pp + j))->getSalary() > (*(pp + k))->getSalary())
			{
				person* tempptr = *(pp + j); // то меняем указатели на них местами
				*(pp + j) = *(pp + k);       // в массиве указателей
				*(pp + k) = tempptr;
			}
}