// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 10chapter_04exercise.cpp
// Имеется пример 447_linklist.cpp текущей (10-й) главы. Требуется
// добавить в класс linklist (связный список) из этого примера деструктор.
// Этот деструктор должен удалять все элементы списка. В тестовых целях
// при удалении каждого элемента требуется выводить сообщение об этом на экран.

// Прямо прописывать вызов деструктора в программе (в main) не требуется, так как
// он будет запущен при уничтожении объекта класса. А объект класса будет в случае
// данной программы автоматически уничтожен при окончании работы программы.

#include <locale>
#include <iostream>
using namespace std;

struct link     // элемент списка
{
	int data;   // данные
	link* next; // указатель на следующий элемент списка
};

class linklist            // класс, представляющий связный список
{
private:
	link* first;          // указатель на первый элемент списка
public:
	linklist()            // конструктор без аргументов
		{ first = NULL; } // первого элемента пока нет
	~linklist();          // деструктор (прототип)
	void additem(int d);  // добавление элемента списка
	void display();       // вывод на экран данных из всех элементов списка
};

void linklist::additem(int d) // добавление элемента списка
{
	link* newlink = new link; // выделяем память под новый элемент списка
	newlink->data = d;        // сохраняем в него данные
	newlink->next = first;    // указатель на следующий элемент списка
	                          // теперь будет указывать на элемент, который
	                          // до этого был первым
	first = newlink;          // первым теперь стал только что созданный элемент,
	                          // то есть добавление элементов происходит
	                          // в начало связанного списка
}

void linklist::display() // вывод на экран данных из всех элементов списка
{
	link* current = first;              // начинаем с первого элемента
	while (current)                     // пока указатель на текущий элемент
	{                                   // не равен NULL (что означает конец списка)
		wcout << current->data << endl; // выводим данные
		current = current->next;        // переходим к следующему элементу
	}
}

// деструктор (реализация)
linklist::~linklist()
{
	link* current = first;     // начинаем с первого элемента
	while (current)            // пока не конец (NULL) списка
	{
		first = current->next; // первым становится предыдущий элемент
		delete current;        // освобождаем память, занятую текущим элементом
		wcout << L"Элемент списка удалён." << endl; // сообщение (в тестовых целях)
		current = first;       // теперь текущий элемент тот, который ранее
		                       // был предыдущим
	}
}

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	linklist li;    // создаем связный список

	li.additem(25); // добавляем четыре элемента в список
	li.additem(36);
	li.additem(49);
	li.additem(64);

	li.display();   // выводим весь список

	// здесь программа завершает свою работу, поэтому автоматически будет
	// выполнено уничтожение объекта li класса linklist, при этом будет
	// автоматически запущен деструктор этого объекта

	return 0;
}