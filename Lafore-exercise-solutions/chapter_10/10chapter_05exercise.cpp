// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 10chapter_05exercise.cpp
// Имеется три локальных массива в main, одного размера и одного и того же типа.
// Первые два уже инициализированы значениями. Требуется написать функцию
// addarrays, принимающую в качестве трех аргументов адреса заданных массивов.
// Четвертым аргументом должен быть размер массивов. Функция должна поэлементно
// складывать значения из первых двух массивов и результаты сохранять в элементах
// третьего массива.

#include <locale>
#include <iostream>
using namespace std;

// прототипы функций
void addarrays(float *, float *, float *, int);
void display(float *, int);

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	const int SIZE = 7; // размер массивов
	// три заданных массива
	float arr1[SIZE] = { 23.1f, 5.67f, 0.32f, 4.0f, 73.213f, 3.5f, 890.1f },
	      arr2[SIZE] = { 11.23f, 7.32f, 444.0f, 32.12f, 79.3f, 5.321f, 45.09f },
	      arr3[SIZE];

	// складываем поэлементно массивы arr1 и arr2, результаты сохраняем в arr3
	addarrays(arr1, arr2, arr3, SIZE);

	// выведем исходные массивы и результат сложения на экран
	wcout << L"Первый массив = "; display(arr1, SIZE); wcout << endl;
	wcout << L"Второй массив = "; display(arr2, SIZE); wcout << endl;
	wcout << L"Результат сложения = "; display(arr3, SIZE); wcout << endl;

	return 0;
}

// функция складывает поэлементно два массива и сохраняет результаты в элементах
// третьего массива (N — размер массивов)
void addarrays(float *a1, float *a2, float *a3, int N)
{
	for (int j = 0; j < N; j++)
		*(a3 + j) = *(a1 + j) + *(a2 + j);
}

// функция выводит элементы массива на экран
void display(float *a, int N)
{
	for (int j = 0; j < N; j++)
		wcout << *(a + j) << ((j != N - 1) ? L", " : L"");
}