// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 08chapter_02exercise.cpp
// заменить перегруженную операцию сложения (+) строк в программе 323_strplus.cpp
// 8-й главы на перегруженную операцию сложения с присваиванием (+=)

// для использования небезопасных функций wcscpy и wcscat
#define _CRT_SECURE_NO_WARNINGS

#include <locale>
#include <iostream>
using namespace std;
// #include <string.h> // для функций wcscpy, wcslen и wcscat не понадобился
// #include <stdlib.h> // для функции exit не понадобился

class String // класс, представляющий строку (массив символов)
{
private:
	// enum { SZ = 80 }; // максимальный размер строки (нестандартный синтаксис)
	static const int SZ = 80; // максимальный размер строки
	                          // (одна константа для всех объектов, статическая)
	wchar_t str[SZ];          // сама строка
public:
	String() // конструктор без аргументов
		{ str[0] = L'\0'; }
	String(const wchar_t s[]) // конструктор с одним аргументом
	{
		wcscpy(str, s);
		// wcscpy_s(str, SZ, s); // рекомендуемый более безопасный вариант
	}
	void display() const // показ строки на экране
		{ wcout << str; }
	// оператор сложения с присваиванием
	String operator+= (String s)
	{
		if (wcslen(str) + wcslen(s.str) < SZ)
		{
			wcscat(str, s.str);          // добавляем содержимое второй строки
			// wcscat_s(str, SZ, s.str); // (рекомендуемый более безопасный вариант)
		}
		else
		{
			wcout << L"\nПереполнение!";
			exit(1);
		}
		return String(str); // возвращаем результат
	}
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	String s1(L"С Рождеством! ");  // конструктор с одним аргументом
	String s2 = L"С Новым годом! "; // аналогично, но в другой форме
	String s3;                     // конструктор без аргументов

	// показываем на экране две исходные строки
	s1.display(); wcout << endl;
	s2.display(); wcout << endl << endl;
	
	// присваиваем строке s1 результат сложения строк s1 и s2
	// (используется перегруженная операция сложения с присваиванием)
	s1 += s2;
	
	// показываем на экране результат операции
	s1.display(); wcout << endl;
	s2.display(); wcout << endl << endl;

	// присваиваем строке s1 результат сложения строк s1 и s2,
	// после чего присваиваем строке s3 содержимое строки s1,
	// то есть после выполнения этого выражения s3 и s1 станут равны друг другу
	// (используется перегруженная операция сложения с присваиванием)
	s3 = s1 += s2;

	// показываем на экране результат операции
	s1.display(); wcout << endl;
	s2.display(); wcout << endl;
	s3.display(); wcout << endl << endl;

	return 0;
}