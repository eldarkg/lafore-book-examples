// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 08chapter_01exercise.cpp
// добавить в класс Distance из программы 320_englplus.cpp 8-й главы
// перегруженную операцию вычитания (-) интервалов в английских мерах длины
// (предполагается, что операция никогда не будет использоваться для
// вычитания большего интервала из меньшего, так как отрицательного интервала
// быть не может)

#include <locale>
#include <iostream>
using namespace std;

class Distance // длина в английской системе
{
private:
	int feet;     // футы
	float inches; // дюймы
public:
	// конструктор без аргументов
	Distance() : feet(0), inches(0.0)
		{ }
	// конструктор с двумя аргументами
	Distance(int ft, float in) : feet(ft), inches(in)
		{ }
	void getdist() // ввод полей с клавиатуры
	{
		wcout << L"Введите число футов: "; wcin >> feet;
		wcout << L"Введите число дюймов: "; wcin >> inches;
	}
	void showdist() // вывод полей на экран
		{ wcout << feet << L"\'-" << inches << L'\"'; }
	// сложение двух интервалов (перегрузка бинарной операции сложения)
	Distance operator+ (Distance) const; // прототип
	// нахождение разности двух интервалов (перегрузка бинарной операции вычитания)
	Distance operator- (Distance) const; // прототип
};

// сложение двух интервалов (перегрузка бинарной операции сложения)
Distance Distance::operator+ (Distance d) const
{
	int f = feet + d.feet;       // складываем футы
	float i = inches + d.inches; // складываем дюймы
	if (i >= 12.0)               // если дюймов стало больше 12
	{
		i -= 12.0;               // то уменьшаем дюймы на 12
		f++;                     // и увеличиваем футы на 1
	}
	return Distance(f, i);       // создаем и возвращаем временную переменную
}

// нахождение разности двух интервалов (перегрузка бинарной операции вычитания)
// (предполагается, что левый операнд больше или равен правому)
Distance Distance::operator- (Distance d) const
{
	int f = feet - d.feet;       // находим разность футов
	float i = inches - d.inches; // находим разность дюймов
	if (i < 0.0)                 // если дюймов стало меньше 0
	{
		i += 12.0;               // то увеличиваем дюймы на 12
		f--;                     // и уменьшаем футы на 1
	}
	return Distance(f, i);       // создаем и возвращаем временную переменную
}

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));
	// переключение стандартного потока ввода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	// определение и инициализация интервалов
	Distance dist1(11, 6.25),
	         dist2(5, 10.32),
	         dist3, dist4;

	// находим разность двух интервалов с помощью перегруженной операции вычитания (-)
	dist3 = dist1 - dist2;

	// вывод интервалов на экран
	wcout << L"dist1 = "; dist1.showdist();
	wcout << L"\ndist2 = "; dist2.showdist();
	wcout << L"\ndist3 = "; dist3.showdist();
	wcout << endl;

	return 0;
}