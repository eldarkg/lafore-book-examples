// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 08chapter_09exercise.cpp
// Дополнить класс safearray из примера 333_arrover3.cpp этой, 8-й, главы так,
// чтобы пользователь мог определять верхнюю и нижнюю границы индекса массива.

// Из-за того, что мы еще пока не проходили динамическое выделение памяти,
// данное упражнение следует выполнять на том же массиве с фиксированным
// размером в 100 элементов (индекс меняется от 0 до 99).

// Заданный пользователем размер индекса массива [lowerbound, upperbound] следует
// отобразить на реальный индекс [0, 99]. Квадратные скобки здесь означают,
// что указанные границы входят в индекс. Например, если пользователь задаст
// размер индекса массива [110, 145], то в реальном массиве эти номера элементов
// будут соответствовать номерам [0, 35].

#include <locale>
#include <iostream>
using namespace std;
// #include <process.h> // для функции exit не понадобился

const int LIMIT = 100; // размер массива

class safearray // класс, реализующий «безопасный» массив
{
private:
	int arr[LIMIT]; // наш массив
	int lowerbound; // нижняя граница индекса массива
	int upperbound; // верхняя граница индекса массива
public:
	// конструктор с двумя аргументами
	safearray(int low, int up) : lowerbound(low), upperbound(up)
	{
		// проверим заданные пользователем границы на ошибки
		if (lowerbound > upperbound)
			{ wcout << L"Ошибка! Верхняя граница индекса массива не может быть меньше нижней.\n"; exit(1); }
		if (upperbound - lowerbound >= LIMIT)
			{ wcout << L"Ошибка! В массиве не может быть больше " << LIMIT << L" элементов.\n"; exit(1); }
	}
	// обратите внимание, что функция возвращает ссылку!
	int& operator[] (int n)
	{
		if (n < lowerbound || n > upperbound)
			{ wcout << L"Ошибочный индекс!"; exit(1); }
		return arr[n - lowerbound];
		// выражение (n - lowerbound) отображает заданный пользователем индекс в реальный
	}
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));
	// переключение стандартного потока ввода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	int low, up; // для верхней и нижней границ индекса массива

	wcout << L"Введите нижнюю границу индекса массива : "; wcin >> low;
	wcout << L"Введите верхнюю границу индекса массива: "; wcin >> up;

	safearray sa1(low, up);

	// задаем значения элементов
	for (int j = low; j <= up; j++)
		// используем функцию слева от знака присваивания (=)
		sa1[j] = j * 10;

	// показываем элементы
	for (int j = low; j <= up; j++)
	{
		// используем функцию справа от знака присваивания (=)
		int temp = sa1[j];
		wcout << L"Элемент " << j << L" равен " << temp << endl;
	}

	return 0;
}