// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 08chapter_06exercise.cpp
// добавить в класс time из 5-го упражнения этой (8-й) главы перегруженные операции
// нахождения разности (-) двух объектов класса и нахождения произведения (*) объекта
// класса и значения типа float

#include <locale>
#include <iostream>
using namespace std;

class time // класс, представляющий время
{
private:
	int hours;   // часы
	int minutes; // минуты
	int seconds; // секунды
public:
	// конструктор без параметров, инициализирующий поля нулями
	time() : hours(0), minutes(0), seconds(0)
		{ }
	// конструктор с одним параметром
	// (переводит время, заданное в секундах, в часы, минуты и секунды)
	time(long s)
		{ secs_to_time(s); }
	// конструктор с параметрами, инициализирующий поля заданными значениями
	time(int h, int m, int s) : hours(h), minutes(m), seconds(s)
		{ }
	// константный метод выводит значения полей на экран
	void display() const
		{ wcout << hours << L":" << minutes << L":" << seconds; }
	// метод переводит время, заданное в часах, минутах и секундах, в эквивалент в секундах
	long time_to_secs() const
		{ return (hours * 3600 + minutes * 60 + seconds); }
	// метод переводит время, заданное в секундах, в часы, минуты и секунды 
	void secs_to_time(long s)
	{
		hours = s / 3600;
		minutes = (s % 3600) / 60;
		seconds = (s % 3600) % 60;
	}
	// метод, складывающий два заданных значения времени и сохраняющий результат
	// в поля объекта, от которого вызван метод
	void add(time, time); // прототип
	// оператор бинарного сложения (+) двух значений (или отрезков) времени
	time operator+ (time) const; // прототип
	// оператор бинарного вычитания (-) двух значений (или отрезков) времени
	time operator- (time) const; // прототип
	// оператор умножения (*) значения (или отрезка) времени на число типа float
	time operator* (float) const; // прототип
	// оператор преобразования объекта класса в число типа float
	operator float() const; // прототип
	// операция префиксного инкремента
	time operator++ (); // прототип
	// операция постфиксного инкремента
	time operator++ (int); // прототип
	// операция префиксного декремента
	time operator-- (); // прототип
	// операция постфиксного декремента
	time operator-- (int); // прототип
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	// создание двух инициализированных константных объектов класса time
	const time t1(16, 30, 45),
	           t2( 5, 50, 20);
	// создание двух объектов класса time с полями, инициализированными нулями
	time t3, t4;

	// складываем два объекта-значения времени и присваиваем результат третьему объекту
	// (используется метод add класса time)
	t3.add(t1, t2);

	// складываем два объекта-значения времени и присваиваем результат четвертому объекту
	// (используется оператор бинарного сложения (+) класса time)
	t4 = t1 + t2;

	// выводим третий и четвертый объекты (результаты сложения) на экран
	wcout << L"Результат (метод add) : "; t3.display(); wcout << endl;
	wcout << L"Результат (оператор +): "; t4.display(); wcout << endl;

	time t5, t6;
	// демонстрация префиксного инкремента объекта класса time
	t5 = ++t3;
	// демонстрация постфиксного инкремента объекта класса time
	t6 = t4++;
	// выводим результаты на экран
	wcout << L"Результат префиксного инкремента : "; t5.display(); wcout << L", "; t3.display(); wcout << endl;
	wcout << L"Результат постфиксного инкремента: "; t6.display(); wcout << L", "; t4.display(); wcout << endl;

	// демонстрация префиксного декремента объекта класса time
	t5 = --t3;
	// демонстрация постфиксного декремента объекта класса time
	t6 = t4--;
	// выводим результаты на экран
	wcout << L"Результат префиксного декремента : "; t5.display(); wcout << L", "; t3.display(); wcout << endl;
	wcout << L"Результат постфиксного декремента: "; t6.display(); wcout << L", "; t4.display(); wcout << endl;

	// демонстрация нахождения разности двух объектов класса time
	t6 = t6 - t5;
	// демонстрация нахождения произведения объекта класса time и числа типа float
	t3 = t5 * 0.5f; // используется перегрузка операции умножения (*)
	t4 = 0.5f * t5; // используется операция преобразования объекта в число типа float
	// выводим результаты на экран
	wcout << L"Результат вычитания: "; t6.display(); wcout << endl;
	wcout << L"Результат умножения объекта на число: "; t3.display(); wcout << endl;
	wcout << L"Результат умножения числа на объект : "; t4.display(); wcout << endl;

	return 0;
}

// метод класса time, складывающий два заданных значения времени и сохраняющий результат
// в поля объекта, от которого вызван метод
void time::add(time t1, time t2)
{
	long totalsecs; // для хранения времени в секундах
	// переводим заданные значения времени в секунды и складываем
	totalsecs = t1.time_to_secs() +	t2.time_to_secs();
	// переводим сумму секунд обратно в часы, минуты и секунды и сохраняем в поля текущего объекта
	secs_to_time(totalsecs);
}

// оператор бинарного сложения (+) двух значений (или отрезков) времени
time time::operator+ (time t) const
{
	long totalsecs; // для хранения времени в секундах
	// переводим заданные значения времени в секунды и складываем
	totalsecs = time_to_secs() + t.time_to_secs();
	// создаем временный безымянный объект класса time с помощью конструктора с одним параметром,
	// который переводит секунды в часы, минуты и секунды,
	// возвращаем созданный объект в качестве результата сложения
	return time(totalsecs);
}

// оператор бинарного вычитания (-) двух значений (или отрезков) времени
time time::operator- (time t) const
{
	return time(time_to_secs() - t.time_to_secs());
}

// оператор умножения (*) значения (или отрезка) времени на число типа float
time time::operator* (float f) const
{
	return time(time_to_secs() * f);
}

// оператор преобразования объекта класса в число
time::operator float() const
{
	// метод time_to_secs возвращает число типа long, которое затем неявно преобразуется к float
	return time_to_secs();
}

// операция префиксного инкремента (прибавляется 1 секунда)
time time::operator++ ()
{
	long totalsecs, ts;
	totalsecs = time_to_secs(); // переводим время в секунды
	ts = ++totalsecs;           // префиксный инкремент
	secs_to_time(totalsecs);    // переводим обратно в часы, минуты и секунды
	return time(ts);            // возвращаем время с прибавленной секундой
}

// операция постфиксного инкремента (прибавляется 1 секунда)
time time::operator++ (int)
{
	long totalsecs, ts;
	totalsecs = time_to_secs(); // переводим время в секунды
	ts = totalsecs++;           // постфиксный инкремент
	secs_to_time(totalsecs);    // переводим обратно в часы, минуты и секунды
	return time(ts);            // возвращаем время без прибавленной секунды
}

// операция префиксного декремента (вычитается 1 секунда)
time time::operator-- ()
{
	long totalsecs, ts;
	totalsecs = time_to_secs(); // переводим время в секунды
	ts = --totalsecs;           // префиксный декремент
	secs_to_time(totalsecs);    // переводим обратно в часы, минуты и секунды
	return time(ts);            // возвращаем время с вычитанием секунды
}

// операция постфиксного декремента (вычитается 1 секунда)
time time::operator-- (int)
{
	long totalsecs, ts;
	totalsecs = time_to_secs(); // переводим время в секунды
	ts = totalsecs--;           // постфиксный декремент
	secs_to_time(totalsecs);    // переводим обратно в часы, минуты и секунды
	return time(ts);            // возвращаем время без вычитания секунды
}