// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 09chapter_07exercise.cpp
// Имеются два класса, созданные в примере 369_counten2.cpp этой (9-й) главы:
// классы Counter и CountDn. Требуется с помощью наследования добавить в эту
// программу инкремент и декремент счетчика в постфиксной форме. Подразумевается,
// что оригинальные классы менять нельзя, а следует создать новый класс.

#include <locale>
#include <iostream>
using namespace std;

// класс, реализующий счетчик и операцию его инкремента (в префиксной форме)
class Counter
{
protected:                    // ЗАМЕТЬТЕ: не private!
	unsigned int count;       // значение счетчика
public:
	Counter() : count(0)      // конструктор без аргументов
		{ }
	Counter(int c) : count(c) // конструктор с одним аргументом
		{ }
	unsigned int get_count() const // получение значения счетчика
		{ return count; }
	Counter operator++ ()     // увеличить значение счетчика (префиксная форма)
		{ return Counter(++count); }
};

// класс, производный от класса Counter (счетчик), добавляющий операцию
// декремента счетчика (в префиксной форме)
class CountDn : public Counter
{
public:
	CountDn() : Counter()       // конструктор без параметров
		{ }
	CountDn(int c) : Counter(c) // конструктор с одним параметром
		{ }
	CountDn operator-- ()       // уменьшить значение счетчика (префиксная форма)
		{ return CountDn(--count); }
};

// новый класс, добавляющий в программу инкремент и декремент счетчика
// в постфиксной форме
class Counter2 : public CountDn
{
public:
	Counter2() : CountDn()       // конструктор без параметров
		{ }
	Counter2(int c) : CountDn(c) // конструктор с одним параметром
		{ }
	// конструктор с одним параметром (для преобразования из Counter в Counter2)
	Counter2(Counter ctr) : CountDn(ctr.get_count())
		{ }
	// конструктор с одним параметром (для преобразования из CountDn в Counter2)
	Counter2(CountDn cdn) : CountDn(cdn.get_count())
		{ }
	Counter2 operator++ (int)    // инкремент (увеличение счетчика) в постфиксной форме
		{ return Counter2(count++); }
	Counter2 operator-- (int)    // декремент (уменьшение счетчика) в постфиксной форме
		{ return Counter2(count--); }
	
	// Введенные в текущем классе (Counter2) операции инкремента и декремента
	// (в постфиксной форме) совпадают по имени с операциями инкремента и декремента
	// (в префиксной форме) из базовых для текущего классов Counter и CountDn, а такое
	// совпадение вызывает «сокрытие данных», что не позволяет использовать указанные
	// операции базовых классов Counter и CountDn для объектов текущего класса Counter2.
	// Для исправления этой ситуации расширяем область видимости с помощью следующих
	// двух операторов:
	
	using CountDn::operator++;
	using CountDn::operator--;
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	Counter2 c1;                           // определение двух объектов класса Counter2
	Counter2 c2(100);                      // с помощью двух разных конструкторов
	wcout << L"c1 = " << c1.get_count();   // выведем результаты на экран
	wcout << L"\nc2 = " << c2.get_count();

	++c1; ++c1; ++c1;                      // префиксный инкремент из класса Counter
	wcout << L"\nc1 = " << c1.get_count(); // выведем результат на экран
	
	--c2; --c2;                            // префиксный декремент из класса CountDn
	wcout << L"\nc2 = " << c2.get_count(); // выведем результат на экран

	Counter2 c3 = ++c1;                    // префиксный инкремент из класса Counter
	                                       // с присваиванием результата вновь созданному
	                                       // объекту класса Counter2
	                                       // (требуется преобразование из Counter в Counter2)
	wcout << L"\nc3 = " << c3.get_count(); // выведем результаты на экран
	wcout << L", c1 = " << c1.get_count();

	Counter2 c4 = --c2;                    // префиксный декремент из класса CountDn
	                                       // с присваиванием результата вновь созданному
	                                       // объекту класса Counter2
										   // (требуется преобразование из CountDn в Counter2)
	wcout << L"\nc4 = " << c4.get_count(); // выведем результаты на экран
	wcout << L", c2 = " << c2.get_count();

	c1++;                                  // постфиксный инкремент из класса Counter2
	wcout << L"\nc1 = " << c1.get_count(); // выведем результат на экран

	c2--;                                  // постфиксный декремент из класса Counter2
	wcout << L"\nc2 = " << c2.get_count(); // выведем результат на экран

	Counter2 c5 = c1++;                    // постфиксный инкремент из класса Counter2
	                                       // с присваиванием результата вновь созданному
	                                       // объекту класса Counter2
	wcout << L"\nc5 = " << c5.get_count(); // выведем результаты на экран
	wcout << L", c1 = " << c1.get_count();

	Counter2 c6 = c2--;                    // постфиксный декремент из класса Counter2
										   // с присваиванием результата вновь созданному
										   // объекту класса Counter2
	wcout << L"\nc6 = " << c6.get_count(); // выведем результаты на экран
	wcout << L", c2 = " << c2.get_count();

	wcout << endl;

	return 0;
}