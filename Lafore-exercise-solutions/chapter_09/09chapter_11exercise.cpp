// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 09chapter_11exercise.cpp
// Создать структуру pair, содержащую два числа. Имеется класс Stack2,
// созданный в примере 371_staken.cpp этой (9-й) главы. Требуется создать
// новый класс pairStack, производный от Stack2. Этот новый класс должен
// иметь два метода, позволяющие реализовать стек для пар чисел.

#include <locale>
#include <iostream>
using namespace std;
// #include <process.h> // для функции exit не понадобился

// В C++ уже существует шаблон структуры std::pair, поэтому использование имени pair
// для своей собственной структуры приведет к неоднозначности и ошибке. Поэтому
// в названии своей собственной структуры я использовал слово Pair (с большой буквы).

struct Pair // пара чисел
{
	int x;
	int y;
};

class Stack                   // класс, реализующий стек (базовый класс)
{
protected:                    // ЗАМЕТЬТЕ: не private!
	// enum { MAX = 7 };      // немного нестандартный синтаксис
	static const int MAX = 7; // количество элементов в массиве
	                          // (одна константа для всех объектов, статическая)
	int st[MAX];              // стек в виде массива
	int top;                  // вершина стека
public:
	Stack()                   // конструктор
		{ top = -1; }
	void push(int var)        // поместить в стек
		{ st[++top] = var; }
	int pop()                 // взять из стека
		{ return st[top--]; }
};

class Stack2 : public Stack   // класс, реализующий стек (производный класс)
{
public:
	void push(int var)        // поместить в стек
	{
		if (top >= MAX - 1)   // если стек полон, то ошибка
			{ wcout << L"\nОшибка: стек полон!\n"; exit(1); }
		Stack::push(var);     // вызов метода push класса Stack
	}
	int pop()                 // взять из стека
	{
		if (top < 0)          // если стек пуст, то ошибка
			{ wcout << L"\nОшибка: стек пуст!\n"; exit(1); }
		return Stack::pop();  // вызов метода pop класса Stack
	}
};

// новый класс, реализующий стек, работающий с парой чисел (производный от Stack2)
class pairStack : public Stack2
{
public:
	void push(Pair unit) // поместить в стек блок из двух чисел
	{
		Stack2::push(unit.x); // поместить в стек первое число
		Stack2::push(unit.y); // поместить в стек второе число
	}
	Pair pop()           // взять из стека блок из двух чисел
	{
		Pair temp_unit;
		// извлекаем из стека числа в обратном порядке, так как стек организуется
		// по принципу «последним вошёл, первым вышел»
		temp_unit.y = Stack2::pop(); // берем из стека второе число
		temp_unit.x = Stack2::pop(); // берем из стека первое число
		return temp_unit;
	}
};

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	Pair p1 = { 23, 56 },     // тестовые пары чисел
		 p2 = { 8, 0 },
		 p3 = { -34, 5 },
		 p4 = { 1003, -345 };

	pairStack s1;             // стек

	s1.push(p1);              // помещаем в стек пары чисел
	s1.push(p2);
	s1.push(p3);
	// s1.push(p4);           // ошибка переполнения стека

	Pair p;
	p = s1.pop(); wcout << p.x << L", " << p.y << endl;
	p = s1.pop(); wcout << p.x << L", " << p.y << endl;
	p = s1.pop(); wcout << p.x << L", " << p.y << endl;
	// p = s1.pop(); wcout << p.x << L", " << p.y << endl; // ошибка, так как стек уже пуст

	return 0;
}