// исходный текст программы сохранен в кодировке UTF-8 с сигнатурой

// 11chapter_02exercise.cpp
// Задан класс Distance (интервал в английских мерах длины: футы, дюймы) такой, как в
// примерах 495_frengl.cpp и 497_frisq.cpp этой (11-й) главы. Требуется написать
// перегруженную операцию перемножения (*) двух объектов класса Distance. Требуется
// сделать эту операцию дружественной для класса Distance, чтобы в выражении вида
// Wdist = 7.5 * dist1; можно было безболезненно менять сомножители местами
// (в этом выражении подразумевается, что 7.5 — это интервал в футах).

// Результат перемножения двух объектов класса Distance уже не является объектом
// класса Distance, так как Distance — это интервал в английских мерах длины, а
// результат перемножения этих интервалов является площадью некоего прямоугольника и
// измеряется в квадратных футах. Поэтому наша перегруженная операция будет возвращать
// не объект класса Distance, а вещественное число квадратных футов.

#include <locale>
#include <iostream>
using namespace std;

class Distance // длина в английской системе
{
private:
	int feet;     // футы (1 фут = 12 дюймов)
	float inches; // дюймы
public:
	// конструктор без аргументов
	Distance() : feet(0), inches(0.0)
		{ }
	// конструктор с одним аргументом (конвертирует float в Distance)
	Distance(float fltfeet)
	{
		feet = static_cast<int>(fltfeet); // футы — это целая часть fltfeet,
		inches = 12 * (fltfeet - feet);   // остальное — это дюймы
	}
	// конструктор с двумя аргументами
	Distance(int ft, float in) : feet(ft), inches(in)
		{ }
	void showdist() const // вывод полей на экран
		{ wcout << feet << L"\'-" << inches << L'\"'; }
	// перемножение двух длин (перегрузка бинарной операции умножения)
	// (дружественная функция, не является членом класса)
	friend float operator* (Distance, Distance); // прототип
};

// перемножение двух длин (перегрузка бинарной операции умножения)
float operator* (Distance d1, Distance d2)
	{ return (d1.feet + d1.inches / 12) * (d2.feet + d2.inches / 12); }

int main()
{
	// переключение стандартного потока вывода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));
	// переключение стандартного потока ввода в формат Юникода
	locale::global(locale("ru_RU.UTF-8"));

	Distance dist1 = 2.5;  // (для конвертации вещественных чисел в объекты класса
	Distance dist2 = 1.25; // Distance используется конструктор с одним аргументом)
	float Wdist; // для хранения результата перемножения двух объектов класса Distance

	// заданы два интервала в английских мерах длины, покажем их на экране
	wcout << L"dist1 = "; dist1.showdist();
	wcout << L"\ndist2 = "; dist2.showdist();

	// перемножим два заданных интервала, меняя сомножители местами,
	// выведем результаты на экран
	Wdist = dist1 * dist2;
	wcout << L"\n\ndist1 * dist2 = " << Wdist << L" кв. футов";
	Wdist = dist2 * dist1;
	wcout << L"\ndist2 * dist1 = " << Wdist << L" кв. футов";

	// рассмотрим случай, когда один из интервалов задан вещественным числом футов,
	// поменяем сомножители местами, выведем результаты на экран
	// (при этом вещественное число футов конвертируется в объект класса Distance
	// с помощью конструктора с одним аргументом)
	Wdist = 7.5 * dist1;
	wcout << L"\n\n7.5 * dist1 = " << Wdist << L" кв. футов";
	Wdist = dist1 * 7.5;
	wcout << L"\ndist1 * 7.5 = " << Wdist << L" кв. футов\n";
	
	return 0;
}